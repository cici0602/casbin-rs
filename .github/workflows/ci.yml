name: CI
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  build:
    name: Auto Build CI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [beta, stable]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
          override: true
      - name: Install wasm32-unknown-unknown for ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: wasm32-unknown-unknown
          override: true

      - name: Setup wasm tools on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Ensure the wasm target is added and install wasm-pack/wasm-bindgen on Windows
          rustup target add wasm32-unknown-unknown --toolchain ${{ matrix.rust }}
          # Try to install wasm-pack and wasm-bindgen-cli via cargo; if running as non-admin this should work
          cargo install wasm-pack --force || Write-Host "wasm-pack install failed"
          cargo install wasm-bindgen-cli --force || Write-Host "wasm-bindgen-cli install failed"
      # Work around https://github.com/actions/cache/issues/403 by using GNU tar
      # instead of BSD tar.
      - name: Install GNU tar (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install gnu-tar for both Intel and Apple Silicon and add to PATH
          brew install gnu-tar || brew reinstall gnu-tar
          if [ -d "/usr/local/opt/gnu-tar/libexec/gnubin" ]; then
            echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
          elif [ -d "/opt/homebrew/opt/gnu-tar/libexec/gnubin" ]; then
            echo PATH="/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
          fi
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-v1
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ matrix.os }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}-v1
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ matrix.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-v1
      - name: Release build async-std
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --no-default-features --features runtime-async-std,cached,glob,ip,watcher,logging,incremental,explain
      - name: Release build tokio
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --no-default-features --features runtime-tokio,cached,glob,ip,watcher,logging,incremental,explain
      - name: Cargo Test For All Features Using async-std
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features runtime-async-std,cached,glob,ip,watcher,logging,incremental,explain
      - name: Cargo Test For All Features Using tokio
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features runtime-tokio,cached,glob,ip,watcher,logging,incremental,explain
      - name: Cargo Check Wasm
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: "--cfg=wasm_js"
          GETRANDOM_NO_JS: "1"
        with:
          command: check
          args: --target wasm32-unknown-unknown --no-default-features --features runtime-async-std,cached,glob,ip,watcher,logging,incremental,getrandom/js
      - name: Clippy warnings
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
      - name: Cargo Fmt Check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
